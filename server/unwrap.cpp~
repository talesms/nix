#include <iostream>
//#include <Python.h>
/**
* Para rodar em Windows é necessário usar as bibliotecas
* #include "cv.h"
* #include "highgui.h"
**/
#include "opencv2/highgui/highgui.hpp"
#include <opencv/cv.h>
#include <fstream>
#include <string>
#include <unistd.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>
#include "unwrap.hpp"

using namespace std;
using namespace cv;

/*int callMSP(char * pyModule, char * pyFunc)
{
    PyObject *pName, *pModule, *pDict, *pFunc;
    PyObject *pArgs, *pValue;

    Py_Initialize();
    PyRun_SimpleString("import sys");
    PyRun_SimpleString("sys.path.insert(0, '')");

    pName = PyString_FromString(pyModule);
    
    pModule = PyImport_Import(pName);
    Py_DECREF(pName);

    if (pModule != NULL) {
       
      pFunc = PyObject_GetAttrString(pModule, pyFunc);

      if (pFunc && PyCallable_Check(pFunc)) {
         pValue = PyObject_CallObject(pFunc, NULL);
      }
    }
    else {
        PyErr_Print();
        fprintf(stderr, "Failed to load \"%s\"\n", pyModule);
        return 1;
    }
    Py_Finalize();
    return 0;

}*/

// ---------------------------------------
void error(const char *msg)
{
    perror(msg);
    exit(1);
}

void configOptions(Options *opt)
{
ifstream txtConfig;
    string linha, sTemp;
    size_t found;
    
    txtConfig.open("configuracoes.txt");
    
    while(!txtConfig.eof())
    {
        getline(txtConfig, linha);
        
        found = linha.find("centerX");
        if (found!=string::npos)
        {
           sTemp = string(linha, (found+8), (linha.size() - (found+8)));
           opt->cx = atoi(sTemp.c_str());
        }
        
        found = linha.find("centerY");
        if (found!=string::npos)
        {
           sTemp = string(linha, (found+8), (linha.size() - (found+8)));
           opt->cy = atoi(sTemp.c_str());
        }
        
        found = linha.find("radiusIn");
        if (found!=string::npos)
        {
           sTemp = string(linha, (found+9), (linha.size() - (found+9)));
           opt->ri = atoi(sTemp.c_str());
        }
        
        found = linha.find("radiusOut");
        if (found!=string::npos)
        {
           sTemp = string(linha, (found+10), (linha.size() - (found+10)));
           opt->ro = atoi(sTemp.c_str());
        }
        
        found = linha.find("ratioX");
        if (found!=string::npos)
        {
           sTemp = string(linha, (found+7), (linha.size() - (found+7)));
           opt->sx = atoi(sTemp.c_str());
        }

        found = linha.find("ratioY");
        if (found!=string::npos)
        {
           sTemp = string(linha, (found+7), (linha.size() - (found+7)));
           opt->sy = atoi(sTemp.c_str());
        }
    }
    
    txtConfig.close();
}

// ---------------------------------------
int rnd(double d)
{
  return static_cast<int>(d+0.5);
}

// ---------------------------------------
void unwrap(const Options &opt, IplImage* inputImg, IplImage** outputImg)
{
  // Create the unwrap image
  int uwWidth = static_cast<int>(ceil((opt.ro * 2.0 * PI)*opt.sx));
  int uwHeight = static_cast<int>(ceil((opt.ro-opt.ri + 1)*opt.sy));
  IplImage* unwrappedImg = cvCreateImage(cvSize(uwWidth, uwHeight), 8, 3);

  double w;
  double r;
  double iX;
  double iY;
  int tmpX;
  int tmpY;

  // Perform unwrapping
  for (int uwX=0; uwX<uwWidth; ++uwX)
    for (int uwY=0; uwY<uwHeight; ++uwY)
  {
    // Convert polar to cartesian
    w=-static_cast<double>(uwX)*2.0*PI/static_cast<double>(uwWidth);
    r=static_cast<double>(opt.ri) +
             static_cast<double>(uwHeight-uwY)*static_cast<double>(opt.ro-opt.ri + 1)/static_cast<double>(uwHeight);
    iX=r*cos(w)+opt.cx;
    iY=r*sin(w)+opt.cy;

    tmpX=rnd(iX);
    tmpY=rnd(iY);
    *(unwrappedImg->imageData + uwY*unwrappedImg->widthStep+uwX*3+0) =
        *(inputImg->imageData + tmpY*inputImg->widthStep+tmpX*3+0);
    *(unwrappedImg->imageData + uwY*unwrappedImg->widthStep+uwX*3+1) =
        *(inputImg->imageData + tmpY*inputImg->widthStep+tmpX*3+1);
    *(unwrappedImg->imageData + uwY*unwrappedImg->widthStep+uwX*3+2) =
        *(inputImg->imageData + tmpY*inputImg->widthStep+tmpX*3+2);
      
  } // for

  // Return the unwrapped image
  (*outputImg) = unwrappedImg;
}


int main(int argc, char *argv[])
{
  Options opt;
  Mat frameOriginal, framePassado, frameContornos, frameTemp;
  IplImage* outputImg=0;
  std::vector<std::vector<cv::Point> > contours;
  int sockfd, newsockfd, portno;
  socklen_t clilen;
  char buffer[2048];
  vector<uchar> imageBuf;
  struct sockaddr_in serv_addr, cli_addr;

  if (argc < 2) {
    fprintf(stderr,"ERROR, no port provided\n");
    exit(1);
  }

  sockfd = socket(AF_INET, SOCK_STREAM, 0);
  if(sockfd < 0)
    error("ERROR opening socket");

  bzero((char *) &serv_addr, sizeof(serv_addr));
  portno = atoi(argv[1]);
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_addr.s_addr = INADDR_ANY;
  serv_addr.sin_port = htons(portno);

  cout << "Waiting client..." << endl;
  if (bind(sockfd, (struct sockaddr *) &serv_addr, 
	sizeof(serv_addr)) < 0) 
     error("ERROR on binding");
  listen(sockfd,5);
  clilen = sizeof(cli_addr);
  newsockfd = accept(sockfd, 
              (struct sockaddr *) &cli_addr, 
              &clilen);
  if (newsockfd < 0) 
     error("ERROR on accept");

  cout << "IP: " << cli_addr.sin_addr.s_addr << "conectou." << endl;

  VideoCapture cap(-1); // open the default camera

  namedWindow("Video Stream",1);
  namedWindow("Convertion Stream",1);

  configOptions(&opt);

  cap >> framePassado;

  for(;;)
  {
    cap >> frameOriginal;

    if(frameOriginal.empty()) continue;

    subtract(frameOriginal, framePassado, frameTemp);
    cvtColor(frameTemp, frameTemp, CV_BGR2GRAY);
    threshold(frameTemp, frameTemp, 10, 255, CV_THRESH_BINARY);
    erode(frameTemp, frameTemp, Mat());
    findContours(frameTemp , contours,CV_RETR_EXTERNAL,CV_CHAIN_APPROX_NONE);
    frameContornos = frameOriginal.clone();
    //drawContours(frameContornos,contours,-1,Scalar(0,0,255),2);

    unwrap(opt, &(IplImage)frameContornos, &outputImg);

    imshow("Video Stream", frameContornos);
    imshow("Convertion Stream", ((Mat)outputImg));

    framePassado = frameOriginal.clone();

    if(contours.size() == 0){
      cout << "\nParado";
    }
    else{
      cout << "\nMovimentando";
      char argument[] = "callMSP";
      char func[] = "escrever_porta";
      //callMSP(argument, func);
    }

    imencode("img.jpg",  (Mat)outputImg , imageBuf);
    cvReleaseImage(&outputImg);
//cout << "converteu em " << imageBuf.size() << endl;

    if(write(newsockfd, imageBuf.data() , imageBuf.size()));
    cvReleaseImage(&outputImg);
    cout << "DEBUG: enviado " << imageBuf.size() << endl;

    if(waitKey(30) >= 0) break;
  }

  if(write(newsockfd, "end",3));

  close(newsockfd);
  close(sockfd);
  exit(0);
}
